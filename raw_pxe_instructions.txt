This is partially based upon instructions from here: 
https://hackaday.com/2018/10/08/hack-my-house-running-raspberry-pi-without-an-sd-card/

... but has been adapted for my configuration (ubuntu 18 lts, beegfs, etc)

==== Initial post-install steps on server
# apt update && apt upgrade -y
# apt install emacs-nox openjdk-11-jdk openssh-server libelf-dev tree
# ssh-keygen -t rsa -b 2048
# mkdir -p /data/tftpboot /data/nfs

---- Disable swap file
$ sudo -i
# dphys-swapfile swapoff
# dphys-swapfile uninstall
# systemctl disable dphys-swapfile
# systemctl stop dphys-swapfile

---- configure networking
configure two networks; primary wifi, secondary wired with address 192.168.2.1

---- Set up dhcp for internal network
# apt install isc-dhcp-server

---- Replace /etc/dhcp/dhcpd.conf with
see latest file in github

---- Configure listening interfaces
$ sudo emacs /etc/default/isc-dhcp-server
INTERFACESv4="eno1"
INTERFACESv6="eno1"

==== Set up TFTP
# apt install tftp-hpa tftpd-hpa xinetd 

Create file /etc/xinetd.d/tftp:

service tftp
{
        disable         = no
        socket_type     = dgram
        protocol        = udp
        wait            = yes
        user            = root
        server          = /usr/sbin/in.tftpd
        server_args     = -v -v -v -s /data/tftpboot
        per_source      = 11
        flags           = IPv4
}


---- Install nfs
# apt install nfs-kernel-server

# emacs /etc/exports

add line:
/data/nfs/client1 *(rw,sync,no_subtree_check,no_root_squash)

# mkdir -p /data/nfs/client1/boot
# systemctl enable rpcbind
# systemctl restart rpcbind
# systemctl enable nfs-kernel-server
# systemctl restart nfs-kernel-server

---- Prepare TFTP boot files
$ wget https://downloads.raspberrypi.org/raspbian_lite_latest
 (this downloads a zip file)

$ unzip raspbian_lite_latest

(blah blah blah)

$ mkdir ~/rootmnt ~/bootmnt
(replace this filename with actual unzipped image)

$sudo kpartx -a -v 2018-11-13-raspbian-stretch-lite.img 
(output)
add map loop15p1 (253:2): 0 89854 linear 7:15 8192
add map loop15p2 (253:3): 0 3547136 linear 7:15 98304

mount using the values reported above.  First partition is always boot.
$ sudo mount /dev/mapper/loop15p1 ~/bootmnt
$ sudo mount /dev/mapper/loop15p2 ~/rootmnt
$ sudo cp -a ~/rootmnt/* /data/nfs/client1/
$ sudo cp -a ~/bootmnt/* /data/nfs/client1/boot/
$ sudo cp -a /data/nfs/client1/bootcode.bin /data/tftpboot/

---- Perform some image maintenance
.... Remove SD card stuff from /etc/fstab
$ emacs /data/nfs/client1/etc/fstab
remove all entries except for /proc

.... Add host entries for cluster nodes
There's probably a better way to manage this (ie, via BIND9 or other service), but it's just as easy to just add host entries for all nodes:

$ emacs /data/nfs/client1/etc/hosts

add the following lines:

192.168.2.1     queenbee
192.168.2.129   pi3-wrk01
192.168.2.130   pi3-wrk02
192.168.2.131   pi3-wrk03
192.168.2.132   pi3-wrk04
192.168.2.133   pi3-wrk05
192.168.2.134   pi3-wrk06
192.168.2.135   pi3-wrk07
192.168.2.136   pi3-wrk08

keep in mind that all pi hosts use the same disk image, so editing /etc/hostname is not really an option.

.... Copy service control stuff
# cd /data/nfs/client1/etc/systemd/system/
# cp {git repo}/server/setup-docker-data.service .
# cd multi-user.target.wants
# ln -siv ../setup-docker-data.service setup-docker-data.service

need to create directory for each node at /data/nfs/hosts/{mac address}

also need to register NFS export by editing /etc/exports

/data/nfs/hosts/b827eb355838 192.168.2.130(rw,sync,no_subtree_check,no_root_squash)/data/nfs/hosts/b827eb355838 192.168.2.130(rw,sync,no_subtree_check,no_root_squash)

note these need to match the associated DHCPD entries!

.... Tweak configuration for our use cases
edit /boot/config.txt and add the following at the end of the file:

# SMD additions

# We're running headless, so use minimum GPU settings
gpu_mem=16

# Disable bluetooth
dtoverlay=pi3-disable-btsu

# Disable wifi
dtoverlay=pi3-disable-wifi

.... Remove some unwanted stuff
$ cd /data/nfs/client1
$ sudo rm var/swap

.... allow DHCP controlled hostnames
sudo echo localhost > /data/nfs/client1/hostname
sudo emacs /data/nfs/client1/etc/dhcp/dhclient-enter-hooks.d/unset_old_hostname
add "unset old_hostname" line

---- Enable SSH access
$ sudo touch /data/nfs/client1/boot/ssh

---- Edit kernel boot commands
$ sudo emacs /data/nfs/client1/cmdline.txt

replace with the following:

dwc_otg.lpm_enable=0 console=serial0,115200 console=tty1 root=/dev/nfs nfsroot=\
192.168.2.1:/data/nfs/client1,udp,v3 rw ip=dhcp rootwait elevator=deadline rootfstype=nfs

(that should all be 1 line)

tail /var/log/syslog and power up the pi.  You should see a line like this:

Dec 12 16:59:40 QueenBee in.tftpd[10985]: RRQ from 192.168.2.64 filename e51d13b5/start.elf

That ID is the id of the pi; we'll need to register it.

$ sudo mkdir /data/tftpboot/e51d13b5
$ sudo emacs /etc/fstab

Add this line (for each pi!)

/data/nfs/client1/boot /data/tftpboot/e51d13b5 none defaults,bind 0 0

NOTE: this bind mounts the same boot directory for all PXE booted hosts.  Since this directory only contains boot files, we could skip this step and simply copy files as needed for each new host.  There's only 23MB of content here.

TODO: shoulnt that mount be read-only?

==== Stuff to do on one booted pi
---- Setup root password
$ sudo passwd root

---- Change default pi password
$ sudo passwd pi

---- Do a system update
$ raspi-config

perform update, set i8n options, set timezone

---- Enable NTP on pi

there's a command to do this in raspbian, need to look it up again

---- Use shared memory for temp dir
$ sudo cp /usr/share/systemd/tmp.mount /etc/systemd/system/tmp.mount

edit /etc/systemd/system/tmp.mount, update Options as follows:
Options=mode=1777,strictatime,nosuid,nodev,size=64M

This creates a 64M /tmp partition in memory.

Enable auto mount...

$ sudo systemctl enable tmp.mount
$ sudo systemctl start tmp.mount

---- Enable docker data bind script
$ sudo systemctl enable setup-docker-data.service
$ sudo systemctl start setup-docker-data.service

==== Set up docker
https://docs.docker.com/install/linux/docker-ce/ubuntu/#set-up-the-repository

==== Post-install cleanup
---- Remove root login via SSH
edit /etc/ssh/sshd-config, comment out line
PermitRootLogin prohibit-password

==== Adding a new pi to cluster
---- Add hardware entry to dhcpd.conf
---- Add directory in /data/tftpboot
---- Add nfs mount or copy files to new directory
---- Create mount directory and add export for each host's docker data
---- Remember to restart service isc-dhcp-server and remount nfs uif appropriate

==== Initialize docker swarm (on server)

$ docker swarm init --advertise-addr 192.168.2.1
Swarm initialized: current node (drbmgrjnd1c7id7v6y0tei047) is now a manager.

To add a worker to this swarm, run the following command:

    docker swarm join --token SWMTKN-1-4owgr7j6yx611c5mbpv5thxu5tfjwm67k4rml9iam9uk24kpbl-dxjpx5a6r1u60zxgtk6yp4ild 192.168.2.1:2377

To add a manager to this swarm, run 'docker swarm join-token manager' and follow the instructions.


==== installing rabbitmq
note: we'll be running rabbitmq on the cluster, these instructions dont help

source: https://computingforgeeks.com/how-to-install-latest-rabbitmq-server-on-ubuntu-18-04-lts/

$ wget -O- https://packages.erlang-solutions.com/ubuntu/erlang_solutions.asc | sudo apt-key add -
$ echo "deb https://packages.erlang-solutions.com/ubuntu bionic contrib" | sudo tee /etc/apt/sources.list.d/rabbitmq.list
$ sudo apt update
$ sudo apt -y install erlang

$ wget -O- https://dl.bintray.com/rabbitmq/Keys/rabbitmq-release-signing-key.asc | sudo apt-key add -

$ wget -O- https://www.rabbitmq.com/rabbitmq-release-signing-key.asc | sudo apt-key add -

$ echo "deb https://dl.bintray.com/rabbitmq/debian $(lsb_release -sc) main" | sudo tee /etc/apt/sources.list.d/rabbitmq.list

$ sudo apt update
$ sudo apt -y install rabbitmq-server

make sure its running:

$ sudo systemctl status  rabbitmq-server.service 

enable management server:

$ sudo rabbitmq-plugins enable rabbitmq_management

sudo rabbitmqctl add_user admin (StrongPassword)
sudo rabbitmqctl set_user_tags admin administrator

connect in browser to http://localhost:15672/#/
use admin password

enable mqtt:

$ sudo rabbitmq-plugins enable rabbitmq_mqtt


==== Installing BeeGFS
---- beegfs setup via admon requires passwordless root login (!)
edit /etc/ssh/sshd-config
un-comment line: PermitRootLogin prohibit-password

$ sudo -i
# ssh-keygen -t rsa -b 2048
# cp ~/.ssh/id_rsa.pub ~/.ssh/authorized_keys

--- Initial setup
Using instructions here: https://www.beegfs.io/wiki/DownloadAdmon

# wget https://www.beegfs.io/release/latest-stable/dists/beegfs-deb9.list
# wget -q https://www.beegfs.io/release/latest-stable/gpg/DEB-GPG-KEY-beegfs -O- | apt-key add -
# mv beegfs-deb9.list /etc/apt/sources.list.d/
# apt-get update
# apt install beegfs-admon

(I used the automatic install, but it didn't succeed.  beegfs-admon setup doesn't appear to work correctly, it kept complaining about missing header files.  I used the manual instrtuctions instead.)

Manual instructions are here: https://www.beegfs.io/wiki/ManualInstallWalkThrough

- do configuration as specified on setup page.  I added the primary host to all four settings.  Note: you *must* have passwordless root ssh configured for this to work.  (TODO: can this be disabled after ssetup?)

